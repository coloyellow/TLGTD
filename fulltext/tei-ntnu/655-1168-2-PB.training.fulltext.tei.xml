<?xml version="1.0" ?><tei xml:space="preserve"><teiHeader><fileDesc xml:id="0"/></teiHeader><text xml:lang="en"><head>緒論<lb/></head><p>以下說明研究動機與研究目的。<lb/></p><head> 研究動機<lb/></head><p> 在目前網路世代之重大改變，即雲端與大數據，大數據的 3Vs 定義是目前為止最受推崇<lb/> 且最廣為人知的說法。3Vs 由 Gartner 分析師 Doug Laney 最早在 2001 年時提出，分別代表龐<lb/> 大資料量(volume) 、資料傳輸速度(velocity) 、資料類型(variety) 。<lb/></p><p> 從最初定義的大數據特性到現在的廣泛運用，大數據與雲端運算已透過各種應用進入人<lb/> 類生活，不管大數據是否有利可圖，無可否認的是，現今社會中已脫離不了大數據，這類雲<lb/> 端應用只會越來越成熟，而生在網路世代的人們，更應該注意這些應用與改變。<lb/></p><p> 近年來，網際網路快速發展，加上不同規格手持裝置出現，前端開發面臨的挑戰越來越<lb/> 大，要考慮用戶端移動裝置性能的問題，也需保有傳統企業的應用。<lb/></p><p> 從開發的角度而言，巨量使用者需求與海量資料的傳遞是網頁應用程式會遇到的，前端<lb/> 開發語言與方式日新月異，也越來越多元，前端開發更因為 Node.js 的技術興起，逐漸由單純<lb/> 的前端邁向全端的開發模式。<lb/></p><p> 在網路大數據，雲端應用以及行動裝置的配合下，互聯網成為目前熱門的研究議題，雲<lb/> 端運算的發展需要企業的建設管理運維等模式去配套。本研究也認為，鎖定開發標準便是在<lb/> 這環境下最需要達成的事情。<lb/></p><p> 事實上，現今存在的前端架構與框架中在開發上有許多問題，包括前端 JavaScript 與網<lb/> 頁互動之困難、前後端開發語言相容性問題、巨量需求造成的伺服器負載量問題、前後端即<lb/> 時通訊之速度問題及前端與後端整合大量雲端服務的高度彈性。因此，在雲端環境下，若能<lb/> 解決這些問題，便是在網路世界對開發者的一大福音。<lb/></p><head> 研究目的<lb/></head><p> 本研究希望從前端的角度，重新定義雲端運算服務，並發展出一套在雲端運算環境下，擁<lb/> 有巨量使用者之介面管理架構。在文獻探討中探討影響前端開發的因素，並達成下列研究目的：<lb/> 一、 針對目前最新技術發展趨勢，提出一個以瀏覽器為中心的雲端運算服務模型。<lb/> 二、 針對此雲端運算服務模型，對前後端問題提出解決辦法。包括 JavaScript 與網頁互動之<lb/> 困難、前後端開發語言相容性問題、巨量需求造成的伺服器負載量問題、前後端即時通<lb/> 訊之速度問題及保留前端與後端整合大量雲端服務的高度彈性。<lb/> 三、 依循本架構，實際建置網站。<lb/></p><head> 文獻探討<lb/></head><p> 以下文獻探討將分別說明雲端運算、雲端運算服務，以及行動裝置架構整合。<lb/></p><p> 雲端運算<lb/> 雲端運算是一種基於網際網路的運算方式，利用共享軟硬體資源和資訊的方式，並按需<lb/> 求提供給電腦和其他裝置。Google 臺灣總經理簡立峰說： 「雲端運算不是一個全新的技術，<lb/> 而是一個概念，因為雲端運算本身並不代表任何一項資訊科技的技術，它是一種電腦運算的<lb/> 概念。簡單的說，就是把所有的資料全部丟到網路上處理」 。林姿華(2010)提到，雲端運算<lb/> 中的「雲」即是我們最常使用的網際網路； 「端」則是指使用者端。意指使用者運用網路服務<lb/> 來完成事情的方式，雲端運算的目標是不安裝軟體，所使用的資料都來自於雲端，使用者只<lb/> 需連上雲端的設備與簡單介面就完成了。<lb/></p><p> 雲端運算服務<lb/> 根據美國國家標準和技術研究院的定義(NIST, 2009) ，雲端運算服務應具備以下五個基<lb/> 礎特徵：隨需應變自助服務(On-demand self-service) 、隨時隨地用任何網路裝置存取(Broad<lb/> network access) 、多人共享資源池 (Resource pooling) 、快速重新部署靈活度 (Rapid elasticity) ，<lb/> 和被監控與量測的服務(Measured service) 。<lb/></p><p> 在網際網路中，雲端運算透過簡單的方式，提供服務給消費者與企業(亞州雲公司，<lb/> 2011) 。消費者希望取得雲端環境下帶來的資訊，企業更希望能從雲端與大數據的海量資料<lb/> 中，幫助創新與加快決策，但成本一直是企業重要的考量因素，如何降低成本同時又快速的<lb/> 回應客戶需求，一直是企業追求的方向之一。當然，雲端環境會遇到許多的困難，上述提到<lb/> 之五種特性又被網際網路中的傳輸與速度大大影響，本研究希望針對傳輸上容易發生的問<lb/> 題，加以優化處理。<lb/></p><p> 在這五個特徵裡，臺灣大學計算機及資訊網路中心主任孫雅麗(2011)認為，雲端服務<lb/> 有別於現在或是過往的運算服務，一個很重要的特點是如何實踐在「雲端服務的提供者能夠<lb/> 提供使用者一個好像有無窮資源，可以隨時回應使用者需求」的概念。本研究認為，雲服務<lb/> 提供者必須能回應使用者創造或架設在雲端還降的應用，比方說電子商務網站，這類應用藥<lb/> 提供及時的需求且保證提供經濟、適當、快速的資源整合服務。<lb/></p><p> 人們對雲端的概念與想像，已從三層服務提升為任何手持裝置透過網路就可從「雲」中<lb/> 享受到需要的服務。雲端運算還有下列特徵：基於虛擬化技術快速部署資源或獲得服務、減<lb/> 少用戶終端的處理負擔、降低了用戶對於資訊科技專業知識的依賴。<lb/></p><p> 為了滿足以上三點特徵，且符合目前世代中行動裝置帶來的改變，用戶端的處理負擔多<lb/> 集中於設備的不同或者運算量差異，本研究認為目前行動運算蔚為趨勢，想要化行動力為競<lb/> 爭力，勢必要制訂出一套行動策略，選擇適當的行動開發工具，建立所需要的行動應用。<lb/></p><p> 行動裝置與架構整合<lb/> 面對今日多樣化的行動設備平台及各種大小尺寸的手機、平板，適應多樣化的前端畫面<lb/> 將無可避免。雖然顯示裝置各式各樣，以致畫面需依不同裝置有所調整，但其實要顯示的內<lb/> 容及背後的商業邏輯是相同的，這時強調畫面與資料封裝分離的 MVC(Model-View-Controller)<lb/> 架構就派上用場。MVC 架構下，檢視畫面有著可變動與擴充的彈性，易於重用的模型，擁有<lb/> 良好的專業分工優點，已深獲各大軟體平台及社群所擁抱。<lb/></p><p> 此外，前端畫面若使用響應式網頁技術(Responsive Web Design) ，同一網站的圖文內容<lb/> 與資料庫能在不同尺寸或解析度的設備或螢幕上，根據使用者的裝置，以符合版面大小的樣<lb/> 式來顯示網頁內容。<lb/></p><p> 伴隨雲端運算普及，使得多數企業不僅已經高度接受並積極部署雲端架構，更為了將資<lb/> 源使用效率拓展至極致，也開始對於混合雲懷抱更大憧憬。有許多廠商積極提倡像是 OpenStack<lb/> 等開放標準，讓企業用戶自行確保其應用程式與資訊都遵循一致性規律，以作為融合式雲端<lb/> 架構的發展基礎。<lb/></p><p> 本研究除了將雲端運算環境下作為考量，在文獻探討後，將雲端運算中特性融入在架構的<lb/> 設計裡，包括動態資源調度、即時資訊呈現、虛擬化，同時保有行動裝置整合的特性，提出以<lb/> 前端瀏覽器為中心之雲端運算服務模型，實際依循架構做開發，並做系統測試驗證系統效能。<lb/></p><head> 研究架構<lb/></head><p> 針對目前最新技術發展趨勢，提出一個以瀏覽器為中心的雲端運算服務模型。從前端角<lb/> 度重新對雲運算做巨觀的定義，本研究稱之「雲端服務交換器系統」 ，並將之視為研究架構。<lb/> 本研究將「雲端服務交換器系統」定義為以瀏覽器為核心，前端擁有大量的使用者，也就是<lb/> 擁有極大量的需求(request) ，搭配一個極高速的中間交換器，連接後端無限量的雲運算服務<lb/> 跟資料。當後端資料要送到前端時，先將運算結果送至緩衝區(buffer)儲存，再從緩衝區取<lb/> 得資料送至前端，如圖 1 所示。<lb/></p><figure> 圖 1 雲端服務交換器系統<lb/> 圖中資料流動方向依照編號進行，圖中編號為資料流動方向。<lb/> 前端需求<lb/></figure><p> 1 使用者需求：前端會有大量瀏覽器同時向後端送出大量使用者需求，交由高速交換器<lb/> 處理。<lb/> 2 建立連線，將需求送至後端：高速交換器與後端建立連線，將需求送至後端。<lb/> 後端回傳<lb/> 3.1 回傳完成信號：後端依照需求運算完畢，向交換器回傳做完的訊號並同時進行 3.2。<lb/> 3.2 將運算結果回傳至緩衝區：後端依照需求運算完畢，將適合前端看到的運算結果儲存<lb/> 到緩衝區並同時進行 3.1。<lb/> 4 由使用者端去緩衝區取得資料：高速交換器接收到運算完畢通知，立即至緩衝區取得前<lb/> 端頁面需要之資料。<lb/> 5 頁面呈現回傳結果：使用者端將高速交換器回傳之資料在頁面中顯示。<lb/></p><head> 研究架構分析<lb/></head><p> 根據上節之定義，先提出中間交換器的特性並選出適合的交換器，在傳輸上，中間交換<lb/> 器將此架構分成兩大部分，接著將提出中間交換器兩端待解決之問題，像是使用者如何快速<lb/> 連接大量資料，或如何順暢的在前端呈現結果等，從傳輸管道與開發管理兩個角度詳述問題，<lb/> 並列出解決辦法。<lb/></p><p> 中間交換器<lb/> 本研究在對雲運算服務定義時，特別增加了一個「交換器」的角色，一般認為的交換器<lb/> 稱為 Switch，在 Switch 中將每個端口看成獨立，Switch 知道封包分別該傳給哪台電腦。本研<lb/> 究將中間交換器定義為「分為前後兩端，前端支援非常多不同使用者，依照使用者的需求，<lb/> 對另一後端的雲進行高速的存取與資訊交換」 ，中間的交換器不進行運算，它處理的事情是從<lb/> 使用者端取得巨量的需求，透過此交換器，取得後端無限量的雲端服務，故本研究根據其特<lb/> 性，選出最適當的中間交換器。<lb/></p><p> (一)中間交換器之選擇問題<lb/> 在巨量使用者的環境下，前端會擁有海量的使用者要求，中間交換器需要快速特性，但<lb/> 不需要處理大量 IO，只是做為一個交換中心，用以快速處理大量需求，並依照各需求的要求<lb/> 取得相對應得資訊並回傳。在傳統的網路技術服務下，當每一個使用者新增一個連線請求時，<lb/> 就會產生一個新的執行緒，或者等待可用的執行緒，產生新的執行緒時，會占用系統內存記<lb/> 憶體，最終占用了所有的可用內存。<lb/></p><p> 在雲端環境下，擁有非常多的使用者，而且每個使用者請求不一定只有一個，因此，如<lb/> 何處理大量需求並減少伺服器負擔是在雲運算環境下刻不容緩的。<lb/></p><p> (二)中間交換器之選擇辦法<lb/> 本研究選擇 Node.js 作為中間交換器。<lb/></p><p> 在語言上，Node.js 就是 JavaScript，寫程式的方法就與平常在前端寫 JavaScript 相同，擁有許<lb/> 多回呼函數。另外，Node.js 對 JSON 格式資料可以直接存取，不需要煩惱轉換與是否匹配的問題。<lb/></p><p> Ryan Dahl 創造 Node.js 的目標就是創造具有即時推送能力的網站。它的特別之處在於純<lb/> 粹的事件導向，且屬於非阻塞性 I/O，不同於以往傳統的前後端資料傳輸處理方式，一個單一<lb/> 節點就能處理非常多的需求，降低後端對於大量需求的記憶體資源需要，如圖 2 所示。<lb/></p><p> 本研究選擇 Node.js 作為中間交換器角色，Node.js 不是一個主導網頁開發的平台，相反<lb/> 的，它是一個滿足特別需求的平台。它不適合用於繁重的計算等 CPU 密集型的操作。它真正<lb/> 的亮點在於建置高效能、高拓展性的互聯網運用，因為它能處理龐大的且高吞吐量的開發連，<lb/> 它正是符合本研究定義之雲運算架構中的中間交換器角色。<lb/></p><figure> 圖 2 Node.js 接到使用者需求示意圖<lb/></figure><p> (三)小結<lb/> 有了中間交換器，就讓架構維持前端與後端分開。此時，中間交換器即時、高速的特性尤<lb/> 其重要。以下從傳輸管道與開發管理方面列出本研究定義之架構中的問題與選擇之改善方法。<lb/></p><head> 傳輸管道<lb/></head><p> 從架構而言，交換器需要服務兩端點，傳輸管道就分為兩邊，如圖 3 中紅框標示之兩個<lb/> 區塊，第一區塊為瀏覽器端與交換器之間的傳輸，第二區塊為交換器與雲運算之間的傳輸。<lb/></p><figure> 圖 3 中間交換器兩端之傳輸管道<lb/></figure><p> (一)傳輸管道之問題<lb/> 以下傳輸管道之問題分別依第一個區塊與第二個區塊探討。<lb/> (1)第一個區塊<lb/> 第一個區塊會遇到的問題為使用者瀏覽器版本不同時傳遞方式的選擇，另外，資料傳輸<lb/> 方式應改善為及時回覆。網路傳輸問題中，訊息交換通常是由客戶端透過瀏覽器發出請求，<lb/> 服務器接收以及審核完請求後，將訊息進行處理並返回結果給客戶端，這個方式並無問題，<lb/> 但對於需要即時性要求較高的應用程式就會顯得困擾。<lb/></p><p> 面對這種狀況，HTML5 定義了 Web Socket 協定，能更好的節省伺服器資源和頻寬並達<lb/> 到即時通訊。Web Socket 是瀏覽器與伺服器交換資料的方式之一，與 HTTP 最大的不同是，<lb/> 它是一個持續的雙向的連線，所以沒有重新連線，重新傳送表頭等多餘的負荷，反應更即時。<lb/> 雖然 Web Socket 已經相當成熟，但是有些瀏覽器的版本是不支援的。<lb/></p><p> 本研究在希望同時增加網頁即時性，並解決 Web Socket 不是所有瀏覽器都支援的問題。<lb/> (2)第二個區塊<lb/> 在第二個區塊為中間交換器與大量雲端服務整合，此區塊在傳輸上更需要高速、擴展性<lb/> 等特性，速度是一大問題，因此，本研究希望統一訊息傳遞間的通訊匯流排，並在此匯流排<lb/> 之下，整合雲端服務。<lb/></p><p> (二)傳輸管道之選擇<lb/> 以下傳輸管道之選擇分別依第一個區塊與第二個區塊探討。<lb/> (1)第一個區塊<lb/> 根據第一區塊的問題，本研究選擇 Socket.IO 作為改善方法。<lb/></p><p> 在技術上，Socket.IO 跟 Node.js 的事件處理方法相同，這就把第一區塊的傳輸方式與交<lb/> 換器端的程式統一成相同的操作方式，讓開發團隊只需專注在處理「事件」 ，即可快速開發出<lb/> 網頁應用程式。<lb/></p><p> 在機制上，Socket.IO 主要使用 Web Socket 作為傳輸協定，當使用者的瀏覽器不支援 Web<lb/> Socket 通訊協定，Socket.IO 還是可以選擇該瀏覽適合的方式傳輸資料。Socket.IO 可以消除不<lb/> 同平台上傳輸方式的差異性，讓開發者更容易發展即時性的網頁應用程式。<lb/> (2)第二個區塊<lb/> 本研究使用 Kafka 作為前端連接後端的唯一通訊方式，統一後端系統的通訊匯流排。<lb/></p><p> (三)小結<lb/> 第一區塊選擇 Socket.IO，第二區塊選擇 Kafka，交換器加入此兩者，完整了兩端的訊息傳<lb/> 遞方式，Socket.IO 增加即時性，第二區塊中，有任何訊息資料需交換時就透過 Kafka，有了這<lb/> 層資料交換之通訊方式，前端不必煩惱後端雲運算是以何種語言或何種架構去完成，前端與後<lb/> 端開發人員可單純且專注得完成自己的任務，而開發管理上問題與解決辦法將於下節做介紹。<lb/></p><p> 開發管理<lb/> 根據上節所述，開發上同樣也分為兩個區塊，但開發上的涵蓋範圍擴大，如圖 4 中所示，<lb/> 第一區塊為前端瀏覽器與中間交換器；第二區塊包含中間交換器、緩衝區與無限量之雲運算。<lb/></p><figure> 圖 4 中間交換器兩端之開發範圍<lb/></figure><p> 第一區塊中，在開發上，主要與前端瀏覽器語言有關，網頁是由 JavaScript 為編譯語言，<lb/> 本研究希望優化 JavaScript 與 HTML 的互動，並選擇適當框架管理前端程式碼。<lb/></p><p> 第二區塊中，在開發上，前端不能直接存取後端雲服務的大量資料，這會造成瀏覽器端<lb/> 的負擔與傳送通道間的負擔太大。下方針對如圖中所示兩大區塊，依照開發管理之難處與因<lb/> 應辦法詳述。<lb/></p><p> (一)開發管理之難處<lb/> 以下分別探討依第一個區塊與第二個區塊開發管理之難處。<lb/></p><p> (1)第一個區塊<lb/> 第一區塊中有兩個困難，一是 JavaScript 與 HTML 互動時耗費資源，二是 JavaScript 開<lb/> 發時的易讀性與程式碼不易管理問題，下方將詳述之。<lb/></p><p> 在網頁中，JavaScript、HTML、CSS 幾乎是目前前端開發的唯一解決方案，雖然 JavaScript 是<lb/> 函數程式語言，但依舊擁有先天上的困難，即要透過 DOM(Document Object Model)與網頁互動。<lb/> DOM 將網頁中各個元素(element)都變成物件(object) ，DOM 是對瀏覽器內所有元素、<lb/> 對象的一個總稱，提供標準訪問方法，供我們對它進行操作，透過 JavaScript，可以重構整個<lb/> HTML 檔案，可以添加、移除、改變或重新排列頁面上的項目。<lb/></p><p> 當要改變頁面上某個東西，JavaScript 就要對 HTML 檔案中所有元素進行訪問。當要把<lb/> 資料顯示出來時，必須在 DOM 與前端畫面之間做兩次的轉換，對 DOM 操作是很耗費資源<lb/> 的，同時在不同瀏覽器也存在問題，故本研究希望盡可能的避免對 DOM 直接操作。<lb/></p><p> 關於第二點管理問題，JavaScript 的概念只有兩層：全域與區域，這讓管理上非常困難，<lb/> 不適合開發大型程式，再加上 JavaScript 沒有名稱空間，不容易模組化，對於程式碼分佈並<lb/> 沒有規範下來，而且允許重複定義同樣名稱的函數，有可能發生已宣告過的名字被後面的定<lb/> 義覆蓋的問題，對開發非常不利，且在開發過程中，由許多複雜的程式碼構成，長久下來，<lb/> 自己難以維護，又無法交付給任何接替者。<lb/></p><p> 另外，在沒有模組的情況下，程式缺少 MVC 的概念，網路快速發展，不同規格的行動<lb/> 裝置出現，前端面臨的考驗越來越大，MVC 的概念就越顯得重要，因為前端開發最不樂見的<lb/> 即是無法專業分工或重複撰寫類似程式碼。因此，本研究希望為前端尋找一個合適的 JavaScript<lb/> 框架，同時減少對 DOM 的操作次數，讓功能清楚切割，讓程式易讀性相對提高。<lb/></p><p> (2)第二個區塊<lb/> 第二區塊中，所有巨量資料不可能一次性地送到前端，很多資料是屬於存在後端的運算<lb/> 資料，這些資料通常是被用來做繁雜的計算及演算法，或者長時間的跑模型，能夠在前端顯<lb/> 示出來的資料，必定是經過一些簡化與處理，才能呈現給使用者。<lb/></p><p> 前端的資料呈現涉及到的是使用者體驗(user experience) ，它涉及到個人使用一個特定產<lb/> 品或系統或服務的有關行為、態度、與情緒。跟系統方面有關的包括實用性、易用性和效率。<lb/> 如果把資料都存在後端，程式碼與資料的保護雖然可以保護得非常周延，但對於瀏覽器端的<lb/> 使用者來說，如果每次都要等待很久才能從看不見的遠方的伺服器得到資料，實在非常不友<lb/> 善，相當於是不好的使用者體驗。而對後端來說，每次使用者的需求，都要耗費長時間傳至<lb/> 後端，中間的資源耗損也是開發團隊不樂見的。<lb/></p><p> (二)開發管理優化<lb/> 以下開發管理優化分別探討第一個區塊與第二個區塊。<lb/> (1)第一個區塊<lb/></p><p> 針對第一個區塊的問題，本研究選擇用 JavaScript 框架解決。JavaScript 框架除了解決前<lb/> 端架構的問題，還可用來彌補各種瀏覽器的差異性，讓各種瀏覽器能依照開發者寫的程式碼<lb/> 運作。本研究考量了包括解決 的問題、架構的切割、功能的劃分及社群討論，決定選<lb/> AngularJS，它的解決方案非常完整，網路上有非常豐富的文件與高度密集的社群討論，<lb/> 本研究相信 Google 開發團隊思考周延性與完整性。<lb/></p><p> AngularJS 提供的雙向資料綁定特性，是最實用的功能之一，能解決原生 JavaScript 與<lb/> DOM 溝通時，容易耗費大量資源的問題。AngularJS 使用不同的方法，嘗試補足 HTML 本<lb/> 身在製作動態應用方面的不足。AngularJS 透過使用「宣告式語法」 ，讓瀏覽器能識別新的<lb/> 語法。<lb/> 在設計上就擁有 MVC 結構，這讓開發上多了許多便利與彈性，模型與最後在<lb/> 檢視畫面中的資料表現中間可以切分開來，本研究更希望網頁能在手持裝置中呈現，故本研<lb/> 究在檢視畫面使用響應式網頁技術克服終端設備的不同，使團隊開發的網頁應用程式在各種<lb/> 設備中彈性調整最適合的畫面大小跟版面排版。<lb/></p><p> (2)第二個區塊<lb/> 第二個區塊的問題，本研究利用架構性的改變，增加緩衝區，讓程式碼好管理。<lb/></p><p> 本研究將巨量資料如何轉成適合前端可瀏覽資料，列為增加使用者體驗的範疇，採取架<lb/> 構性改變作為解決辦法，而不是美工與畫面上的加強。本研究選擇 MongoDB 作為緩衝區，<lb/> 透過增設緩衝區的資料存取，優化使用者體驗。緩衝區用來存放使用者能直接讀取之資料，<lb/> 與後端雲運算拆開，而雲運算則將複雜運算過的資料送到前端前，會做一個篩選的動作，緩<lb/> 衝區不需專注在大量運算邏輯或演算法上。另外，透過緩衝區，在前端就能把簡單的運算解<lb/> 決，例如，在前端執行會員登入與驗證，就不必透過層層關卡送到後端，卻只為了驗證會員<lb/> 帳號密碼是否正確，緩衝區即是存放不需要運算之資料或者前端使用者需要見到的結果。<lb/></p><p> MongoDB 屬於非結構性資料庫，採用 JSON 格式儲存，選擇與中間交換器相同的語言，<lb/> 傳輸完全相容，速度非常快，故緩衝區能減少傳輸負擔，增加使用者體驗。<lb/></p><p> (三)小結<lb/> 第一區塊中前端開發的問題，選擇框架解決。第二區塊中則是利用架構性的改變，增設<lb/> 緩衝區。透過 AngularJS 中雙向資料綁定特性，解決了原生 JavaScript 與 DOM 溝通時，容易<lb/> 耗費大量資源的問題；框架的使用也讓開發程式有了適當的管理；響應式網頁技術讓應用程<lb/> 式頁面擁有不同手持裝置或電腦瀏覽器都能呈現的高度彈性。<lb/></p><head> 研究架構分析小結<lb/></head><p> 本研究在此架構中，解決交換器兩端連線、傳輸、資料量與增加使用者體驗，圖 5 為本<lb/> 研究雲端服務交換器系統之展現。<lb/></p><figure> 圖 5<lb/></figure><p> 在傳輸管道上，前端大量需求透過 Socket.IO 增加即時性，後端無限多的資源與雲運算透<lb/> 過 Kafka 整合。Kafka 除了被用來當作傳輸機制外，部分開發者會將之視為傳送資料之媒介，<lb/> 本研究為了減少 Kafka 的負擔，稍作改善，將 MongoDB 作為巨量資料之緩衝區，後端往前<lb/> 端回傳資料時，會同時做兩件事情，一是透過 Kafka 單純做訊息通知，二是將前端需要之資<lb/> 料存入 MongoDB。MongoDB 與 Node.js 開發語言相同，傳輸上不需擔心速度的問題，而巨<lb/> 量資料存取可以透過此機制達到緩衝效果。<lb/></p><p> 期待此雲端服務交換器系統此服務模型能加速開發時間，運用新穎技術，使開發團隊擁<lb/> 有雲端與大數據知識與行動開發經驗，依據多變環境提供更彈性化的調整，讓此架構在雲端<lb/> 運算環境下，能處理龐大資料量、改善資料傳輸速度、輕易與後端大量運算整合，最終達成<lb/> 網站順利建制之目的。<lb/></p><head> 系統測試<lb/></head><p> 本研究將系統測試分為兩個階段，一為性能測試，運用 Apache 開發之 Ab 工具，二為網<lb/> 頁效能測試，運用 Google 提供之 PageSpeed Insights。<lb/></p><p> 性能測試<lb/> 測試工具：Apache Ab<lb/> 此測試的目的是要消除瓶頸，理想測試是軟體能夠在穩定的情況下進行測試，測試的過<lb/> 程是順利的進行。<lb/> 量請求與同時有大量連線數時的處理速度。測試語法如下：<lb/> ab [-c concurrency] [-n requests]<lb/> [http[s]://]hostname[:port]/path<lb/></p><p> 測試結果<lb/> 實際測試結果如下表 1，名詞介紹如下，並發數表示同時連線數(concurrency level) ；全<lb/> 部請求數表示頁面總訪問數(complete requests) ；每秒處理請求數(requests per second)表示<lb/> 每秒平均處理多少請求；請求運行時間表示每個請求運行時間平均值(time per request) ，單<lb/> 位為毫秒(ms) ，每秒網路流量表示每秒網路上流量(transfer rate) ，單位為 Kbytes／秒<lb/> (Kbytes/sec) 。<lb/></p><figure type="table"> 表 1 性能測試結果<lb/> 測試<lb/> 並發數<lb/> 全部請求數<lb/> 每秒處理請求數<lb/> 請求運行時間<lb/> 每秒網路流量<lb/> 1<lb/> 10<lb/> 1000<lb/> 402.68<lb/> 2.483<lb/> 746.76<lb/> 2<lb/> 10<lb/> 2000<lb/> 376.92<lb/> 2.653<lb/> 698.99<lb/> 3<lb/> 100<lb/> 2000<lb/> 442.03<lb/> 2.262<lb/> 820.03<lb/> 4<lb/> 100<lb/> 3000<lb/> 428.96<lb/> 2.331<lb/> 795.89<lb/> 5<lb/> 200<lb/> 1000<lb/> 353.67<lb/> 2.828<lb/> 667.73<lb/> 6<lb/> 200<lb/> 2000<lb/> 468.51<lb/> 2.134<lb/> 874.62<lb/> 7<lb/> 200<lb/> 3000<lb/> 465.12<lb/> 2.15<lb/> 864.09<lb/> 8<lb/> 250<lb/> 3000<lb/> 447.18<lb/> 2.236<lb/> 836.16<lb/> 9<lb/> 250<lb/> 4000<lb/> 478.48<lb/> 2.09<lb/> 891.28<lb/> 10<lb/> 250<lb/> 5000<lb/> 487.5<lb/> 2.051<lb/> 906.47<lb/> 11<lb/> 250<lb/> 6000<lb/> 473<lb/> 2.114<lb/> 878.88<lb/> 12<lb/> 250<lb/> 7000<lb/> 486.72<lb/> 2.055<lb/> 903.55<lb/> 13<lb/> 250<lb/> 8000<lb/> 484.83<lb/> 2.063<lb/> 901.42<lb/> 14<lb/> 250<lb/> 9000<lb/> 483.55<lb/> 2.068<lb/> 899.52<lb/> 15<lb/> 250<lb/> 10000<lb/> 489.9<lb/> 2.041<lb/> 910.19<lb/> 16<lb/> 250<lb/> 15000<lb/> 490.35<lb/> 2.039<lb/> 909.5<lb/></figure><p> 在表 1 可以發現同時連線數與訪問數增加，在每秒處理請求數變動量不大，除了數據上<lb/> 顯示系統擁有高吞吐量及高速特性，本研究也將性能測試結果中每秒處理請求數、請求運行<lb/> 時間之數據做成圖表，如圖 6 所示，可以看到每秒處理請求數(上方折線：參考左方 Y 軸尺標)<lb/> 維持在 400-500 之間，故每個請求運行時間(下方折線：參考右方 Y 軸尺標)也維持在 2 毫<lb/> 秒左右，除了速度快速外，顯示系統穩定性非常高。<lb/></p><figure> 圖 6 性能測試結果<lb/></figure><p> 網頁效能測試<lb/> 測試工具：Google PageSpeed Insights<lb/> 根據 Google「網頁效能最佳做法」來分析網站的效能，這是一組 Google 建議的優化前<lb/> 端效能的規則，可以從這個方便的工具得到大量的資訊，其中包括一個流動裝置最佳效能的<lb/> 最佳做法分析。這項工具會擷取網址兩次，一次是透過行動使用者代理程式擷取，一次是透<lb/> 過電腦使用者代理程式擷取。<lb/></p><p> 測試結果<lb/> 測試結果分成為電腦版、行動版與使用者體驗，針對電腦版與行動版以速度規則做測試<lb/> 規則，速度規則測試結果於表 2 所示。使用者體驗測試則遵循適用性規則，適用性規則測試<lb/> 結果於表 3 中所示。<lb/></p><figure type="table"> 表 2 速度規則測試結果<lb/> 速度規則名稱<lb/> 測試結果<lb/> 禁止到達網頁重新導向<lb/> 通過<lb/> 啟用壓縮功能<lb/> 通過<lb/> 加快伺服器回應時間<lb/> 通過<lb/> 使用瀏覽器快取功能<lb/> 建議修正<lb/> 壓縮資源<lb/> 通過<lb/> 最佳化圖片<lb/> 通過<lb/> 為 CSS 傳送進行最佳化處理<lb/> 通過<lb/> 優先處理要顯示的內容<lb/> 建議修正<lb/> 移除禁止轉譯 JavaScript<lb/> 需修正<lb/> 使用非同步指令碼<lb/> 通過<lb/> 表 3<lb/> 適用性規則名稱<lb/> 測試結果<lb/> 避免使用外掛程式<lb/> 通過<lb/> 設定檢視區<lb/> 通過<lb/> 根據檢視區調整內容大小<lb/> 通過<lb/> 適當調整點按目標大小<lb/> 通過<lb/> 使用易讀的字型大小<lb/> 通過<lb/></figure><p> PageSpeed Insights 的評分範圍介於 0 到 100 之間。分數以高為佳，獲得 60 分以上及格，<lb/> 獲得 85 以上分數即表示網頁的執行效能良好，表 4 顯示網頁效能測試分數。<lb/></p><figure type="table"> 表 4 網頁效能測試分數<lb/> 電腦版<lb/> 行動版<lb/> 使用者體驗<lb/> 分數<lb/> 87<lb/> 67<lb/> 100<lb/> 遵循規則<lb/> 速度規則<lb/> 適用性規則<lb/></figure><p> 2 與表 3 測試結果中，本研究將「移除禁止轉譯 JavaScript」規則列為優先解決之問<lb/> 題，從表 4 中發現，網頁效能在網頁版上測試結果良好，而行動版還需加強。<lb/></p><p> 另外，由於網路連線速度快慢差異很大，因此 PageSpeed Insights 只會從與網路無關的方面<lb/> 來檢視網頁的效能表現，包含：伺服器配置、網頁的 HTML 結構及使用的外部資源。實作建議<lb/> 的解決方法應有助於提升網頁效能，不過使用者的網路連線依然是影響網頁效能的絕對因素。<lb/></p><head> 總結<lb/></head><p> 本研究主要是建立一個架構，提出一個以瀏覽器為中心的雲端運算服務模型。本研究稱<lb/> 之「雲端運算的服務交換器系統」 ，結合各種技術，為前端提出一個新型的開發管理架構，該<lb/> 架構具有以下特色：<lb/></p><p> 系統彈性<lb/> 由於各種網站或系統的多樣性，在系統實作時，可依照自行需求將此架構拆開並遵循。<lb/></p><p> 高速<lb/> 從前端語言到後端伺服器的選用上，本研究整合新穎技術，將 Node.js、AngularJS、<lb/> MongoDB 整合，並統一傳輸格式。Node.js 能處理龐大資料的高吞吐量特性，符合本研究定<lb/> 義之雲運算架構中的中間交換器角色，讓架構維持前端與後端分開。另外，在尋求同時兼顧<lb/> 開發效率和軟體效能的解決方案時，本研究認為 JavaScript 在 Node.js 的加持下，成為一個不<lb/> 失效能、彈性和硬體、系統的耦合度的解決方案。<lb/></p><p> 效能與穩定性<lb/> 為了確保此架構速度與彈性，效能與穩定性為最需要解決的重要議題。本研究採用兩種<lb/> 測試，依照所得之測試數據，可得出以下幾點結論：<lb/></p><p> 1. 本研究所提出之新架構，在實作後測試其速度及範圍皆可行。<lb/> 2. 本研究所實作之網站在網頁版中執行效能良好。<lb/> 3. 本研究所實作之網站在行動版中，執行效能中等，雖符合響應式網頁，要求更輕量的程<lb/> 式，應列為後續改善項目。<lb/></p><head> 未來展望<lb/></head><p> 本研究因受時間與資源的限制，未能將系統建置得盡善盡美，因此在下方列出幾項建議<lb/> 運用本架構實務應用之參考：<lb/> (一) 除本研究所選擇之 AngularJS 框架外，可參考其它框架，如 Ember.js、Batman.js。<lb/> (二) 系統建制牽涉到許多軟硬體資源，本研究將網站建置於單一電腦主機上，若要增強處理<lb/> 速度，本研究認為可考慮增加主機數量，甚至提升為分散式平行處理。<lb/> (三) 本網站主要針對其功能與架構之可行性進行開發，對於系統後台無琢磨太深，建議增加<lb/> 其管理功能，本系統目前將每位使用者視為同一等級，未來可提供不同權限之身份。<lb/> (四) 資料庫使用上，將來可嘗試將資料庫做分散式處理，甚至搭配備份，減低各個機器負擔，<lb/> 並增加容錯力。<lb/> (五) 本研究對於網頁版本開發琢磨較深，在網頁性能測試時，行動版競爭力較弱，應持續優<lb/> 化行動版網頁。</p></text></tei>